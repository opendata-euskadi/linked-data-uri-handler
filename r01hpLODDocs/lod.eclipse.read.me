
Start BlazeGraph in eclipse
===========================
1.- Goto [Run] > [External Tools] > [External Tools Configuration...]
2.- Create a NEW config with:
		Location:		jdk location 		eg. "/develop/java/jdk1.8.0_121/bin/java"
		Working Directory: 	blazegraph location 	eg. "/servers/lod/blazegraph"
		Arguments: 		blazegraph jar 		eg. "-server -jar /servers/lod/blazegraph/blazegraph.jar"

Start Tomcat in eclipse
===========================
1.- Create a NEW Server "Tomcat at localhost"

2.- Add r01hpLODWar project.

3.- OPTIONAL (see note)
	Add config path (eg."-Delda.spec=/home/develop/eclipse/projects_platea/r01hp/r01hpConfig/loc_win/elda/r01hp.elda.euskadi_es.config.ttl") as VM arguments in Run configurations.
    
	NOTE: ELDA CONFIG
    Elda uses a ttl (turtle) file as a config file
    config file can be set in TWO diferent ways:
   	[1] - From the WEB.XML file (see com.epimorphics.lda.routing.ServletUtils#specNamesFromInitParam())
   		  		The web.xml file contains a CONTEXT PARAM like:
   					<context-param>
						<param-name>com.epimorphics.api.initialSpecFile</param-name>
						<param-value>${r01hpConfigPath}/elda/r01hp.elda.euskadi_es.config.ttl</param-value>
   					</context-param>
   		  		PROBLEM with this alternative:
   					The web.xml init parameter named=com.epimorphics.api.initialSpecFile that sets where the ELDA config file 
   					be an absolute path of a .ttl file
   			    	... BUT this path depends on the environment
   						- Tomcat allows init-param in web.xml file to use environment vars (set with -Dvar=value when starting the JVM)
							<context-param>
								<param-name>com.epimorphics.api.initialSpecFile</param-name>
								<param-value>${r01hpConfigPath}/elda/r01hp.elda.euskadi_es.config.ttl</param-value>
   							</context-param>
   						- Weblogic DOES NOT interpolates environment vars in web.xml init-params 
   					... so JVM env params cannot be used consistently between Tomcat & Weblogic
   
   	[2] - From a JVM's environment variable (see com.epimorphics.lda.routing.ServletUtils#specNamesFromSystemProperties())
   				Just set a JVM environment variable:
   					-Delda.spec={absolute path of the .ttl file} 
   					
    If neither [1] nor [2] is used, the bootstrap process will set -Delda.spec={absolute path of the .ttl file} 
	using the r01hp.lod.properties.xml file
